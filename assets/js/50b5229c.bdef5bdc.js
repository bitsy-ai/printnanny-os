"use strict";(self.webpackChunkprintnanny_docs=self.webpackChunkprintnanny_docs||[]).push([[8147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,b=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return t?i.createElement(b,o(o({ref:n},p),{},{components:t})):i.createElement(b,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const a={sidebar_position:4},o="PrintNanny SDWire",l={unversionedId:"addons/sdwire",id:"addons/sdwire",title:"PrintNanny SDWire",description:"What does an SDWire board do?",source:"@site/docs/addons/sdwire.md",sourceDirName:"addons",slug:"/addons/sdwire",permalink:"/docs/addons/sdwire",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"quickStartSidebar",previous:{title:"File Sync (Syncthing)",permalink:"/docs/addons/file-sync"},next:{title:"Tailscale VPN",permalink:"/docs/addons/tailscale"}},s={},d=[{value:"What does an SDWire board do?",id:"what-does-an-sdwire-board-do",level:2},{value:"Installation",id:"installation",level:2},{value:"Build CLI from Source",id:"build-cli-from-source",level:3},{value:"1. Clone Github Repo",id:"1-clone-github-repo",level:4},{value:"2. Install Pre-requisites",id:"2-install-pre-requisites",level:4},{value:"3. Build",id:"3-build",level:4},{value:"Usage",id:"usage",level:2},{value:"List SDwire devices",id:"list-sdwire-devices",level:3},{value:"Mode: Test Server",id:"mode-test-server",level:3},{value:"Mode Device-Under-Test",id:"mode-device-under-test",level:3},{value:"Other Usage",id:"other-usage",level:3},{value:"Links",id:"links",level:2}],p={toc:d};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"printnanny-sdwire"},"PrintNanny SDWire"),(0,r.kt)("h2",{id:"what-does-an-sdwire-board-do"},"What does an SDWire board do?"),(0,r.kt)("p",null,"SDWire's design is dead simple. The board fits a micro SD card slot, for example, the micro SD slot on a Raspberry Pi."),(0,r.kt)("p",null,'I use the SDWire board to "re-image" an SD card over a USB connection. This helps me smoke test a PrintNanny OS release candidate without physically inserting/removing the SD card from a Raspberry Pi.'),(0,r.kt)("p",null,"The board's main feature is a USB mux (multiplexer) with two modes:"),(0,r.kt)("p",null,'"Test server" mode, which allows you to write data to an SD card over a USB connection.\n"Device-under-test" or "DUT" mode, which allows another device (like Raspberry Pi) to read/write to the SD card.'),(0,r.kt)("p",null,"For more info, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://bitsy.ai/preorder-printnanny-sdwire/"},"blog post")," about PrintNanny SDWire's development."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"This section will show you how to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"printnanny-sdwire")," command-line tool."),(0,r.kt)("h3",{id:"build-cli-from-source"},"Build CLI from Source"),(0,r.kt)("p",null,"If there isn't a pre-built binary available for your platform/distribution, you can build from source."),(0,r.kt)("h4",{id:"1-clone-github-repo"},"1. Clone Github Repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ git clone https://github.com/bitsy-ai/printnanny-sdwire\n\n")),(0,r.kt)("h4",{id:"2-install-pre-requisites"},"2. Install Pre-requisites"),(0,r.kt)("p",null,"You'll need to install the following pre-requisite libraries:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"GNU Make / GCC"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"libusb")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"libftdi1"))),(0,r.kt)("p",null,"On Debian/Ubuuntu distributions, install pre-requisites using ",(0,r.kt)("inlineCode",{parentName:"p"},"apt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get update\n$ sudo apt-get install libusb-1.0-0-dev libftdi1-dev\n")),(0,r.kt)("p",null,"For RHEL distrbutions, install pre-requisites using ",(0,r.kt)("inlineCode",{parentName:"p"},"yum"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yum update \n$ yum install libusb libftdi\n")),(0,r.kt)("h4",{id:"3-build"},"3. Build"),(0,r.kt)("p",null,"Run the following commands to build from source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd src/\n$ make\n")),(0,r.kt)("p",null,"Optionally, copy the binary to a location in your ",(0,r.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo cp sdwire /usr/local/bin/printnanny-sdwire\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The following section describes how to use SDWire with two machines:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Host machine (any Linux device)"),(0,r.kt)("li",{parentName:"ol"},"Test machine (any device that boots from an SD card)")),(0,r.kt)("h3",{id:"list-sdwire-devices"},"List SDwire devices"),(0,r.kt)("p",null,"Connect your SDWire board to your ",(0,r.kt)("strong",{parentName:"p"},"host computer")," using a USB cable."),(0,r.kt)("p",null,"Run the following command to verify your SDWire board is connected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ printnanny-sdwire --list           \nNumber of FTDI devices found: 1\nDev: 0, Manufacturer: SRPOL, Serial: <unique serial number>, Description: sd-wire\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Your SDWire board will arrive pre-programmed with a unique serial number.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you see an error ",(0,r.kt)("inlineCode",{parentName:"p"},"libusb_open() failed"),", re-run the command using ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"$ printnanny-sdwire --list \nNumber of FTDI devices found: 1\nftdi_usb_get_strings failed: -4 (libusb_open() failed)\n$ sudo printnanny-sdwire --list           \nNumber of FTDI devices found: 1\nDev: 0, Manufacturer: SRPOL, Serial: <unique serial number>, Description: sd-wire\n"))),(0,r.kt)("h3",{id:"mode-test-server"},"Mode: Test Server"),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Test Server")," mode, the SDWire board is available for read/write operations originating from your ",(0,r.kt)("strong",{parentName:"p"},"host machine"),"."),(0,r.kt)("p",null,"To put the device into Test Server mode, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ printnanny-sdwire --device-serial=<serial number> --ts      \n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you see an error ",(0,r.kt)("inlineCode",{parentName:"p"},"libusb_open() failed"),", re-run the command using ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo"),".")),(0,r.kt)("p",null,"When the SDWire is in ",(0,r.kt)("strong",{parentName:"p"},"Test Server")," mode, a solid blue LED labeled ",(0,r.kt)("inlineCode",{parentName:"p"},"TS")," will remain lit."),(0,r.kt)("h3",{id:"mode-device-under-test"},"Mode Device-Under-Test"),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"Device-Under-Test")," mode, the SDWire board is available for read/write operations originating from the ",(0,r.kt)("strong",{parentName:"p"},"test machine"),"."),(0,r.kt)("p",null,"To put the device into Device-Under-Test mode, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ printnanny-sdwire --device-serial=<serial number> --dut     \n")),(0,r.kt)("p",null,"When the SDWire is in ",(0,r.kt)("strong",{parentName:"p"},"Device-Under-Test")," mode, a solid green LED labeled ",(0,r.kt)("inlineCode",{parentName:"p"},"DUT")," will remain lit."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you see an error ",(0,r.kt)("inlineCode",{parentName:"p"},"libusb_open() failed"),", re-run the command using ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo"),".")),(0,r.kt)("h3",{id:"other-usage"},"Other Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ printnanny-sdwire --help\nUsage: sdwire command\n  -l, --list                     lists all sd-mux devices connected to PC\n  -i, --info                     displays info about device\n  -o, --show-serial              displays serial number of given device\n  -r, --set-serial=STRING        writes serial number to given device\n  -t, --init                     initialize target board\n  -d, --dut                      connects SD card and USB to the target board\n  -s, --ts                       connects SD card and USB to the test server\n  -p, --pins=INT                 write pin state in bitbang mode\n  -c, --tick                     turn off and on power supply of DUT\n  -u, --status                   show current status: DUT or TS or NOINIT\n  -y, --dyper1=STRING            Connect or disconnect terminals of 1st dynamic jumper;\n                                 STRING = "on" or "off"\n  -z, --dyper2=STRING            Connect or disconnect terminals of 2nd dynamic jumper;\n                                 STRING = "on" or "off"\n  -m, --tick-time=INT            set time delay for \'tick\' command\n  -v, --device-id=INT            use device with given id\n  -e, --device-serial=STRING     use device with given serial number\n  -k, --device-type=STRING       make the device of this type\n  -x, --vendor=INT               use device with given vendor id\n  -a, --product=INT              use device with given product id\n  -n, --invert                   invert bits for --pins command\n\nHelp options:\n  -?, --help                     Show this help message\n      --usage                    Display brief usage message\n')),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitsy-ai/printnanny-sdwire"},"Github Repo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bitsy.ai/preorder-printnanny-sdwire/"},"Blog Post"))))}u.isMDXComponent=!0}}]);